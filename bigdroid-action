#!/usr/bin/env bash
main@bashbox%5970 () 
{ 
    function process::self::exit () 
    { 
        local _r=$?;
        kill -USR1 "$___self_PID";
        exit $_r
    };
    function process::self::forcekill () 
    { 
        exec 2> /dev/null;
        kill -9 "$___self_PID"
    };
    function log::error () 
    { 
        local _retcode="${2:-$?}";
        local _exception_line="$1";
        local _source="${BB_ERR_SOURCE:-"${BASH_SOURCE[-1]}"}";
        if [[ ! "$_exception_line" == "("*")" ]]; then
            { 
                echo -e "[!!!] \033[1;31merror\033[0m[$_retcode]: ${_source##*/}[$BASH_LINENO]: ${BB_ERR_MSG:-"$_exception_line"}" 1>&2;
                if test -v BB_ERR_MSG; then
                    { 
                        echo -e "STACK TRACE: (TOKEN: $_exception_line)" 1>&2;
                        local -i _frame=0;
                        local _treestack='|--';
                        local _line _caller _source;
                        while read -r _line _caller _source < <(caller "$_frame"); do
                            { 
                                echo "$_treestack ${_caller} >> ${_source##*/}::${_line}" 1>&2;
                                _frame+=1;
                                _treestack+='--'
                            };
                        done
                    };
                fi
            };
        else
            { 
                echo -e "[!!!] \033[1;31merror\033[0m[$_retcode]: ${_source##*/}[$BASH_LINENO]: SUBSHELL EXITED WITH NON-ZERO STATUS" 1>&2
            };
        fi;
        return "$_retcode"
    };
    \command \unalias -a || exit;
    trap 'exit' USR1;
    trap 'BB_ERR_MSG="UNCAUGHT EXCEPTION" log::error "$BASH_COMMAND" || process::self::exit' ERR;
    set -eEuT -o pipefail;
    shopt -s inherit_errexit expand_aliases;
    ___self="$0";
    ___self_PID="$$";
    ___MAIN_FUNCNAME="main@bashbox%5970";
    ___self_NAME="bigdroid-action";
    ___self_CODENAME="bigdroid-action";
    ___self_AUTHORS=("AXON <axonasif@gmail.com>");
    ___self_VERSION="0.1.3";
    ___self_DEPENDENCIES=(std::0.1.8);
    ___self_REPOSITORY="";
    ___self_BASHBOX_COMPAT="0.3.6~";
    function array::rename () 
    { 
        local _array="$1";
        local _array_new_name="$2";
        local _arr_alloc;
        _arr_alloc=$(declare -p "$_array");
        _arr_alloc="${_arr_alloc/declare -a $_array/$_array_new_name}";
        eval "$_arr_alloc";
        unset "$_array"
    };
    function todo () 
    { 
        local _new_meta="$1";
        local _prev_meta="$2";
        readonly _new_meta _prev_meta;
        source "$_new_meta";
        array::rename "HOOKS" "HOOKS_NEW";
        source "$_prev_meta";
        array::rename "HOOKS" "HOOKS_PREV";
        local _hook;
        echo "Printing HOOKS_NEW";
        for _hook in "${HOOKS_NEW[@]}";
        do
            { 
                echo "HOOKS_NEW: $_hook"
            };
        done;
        unset _hook;
        echo "Printing HOOKS_PREV";
        for _hook in "${HOOKS_PREV[@]}";
        do
            { 
                echo "HOOKS_PREV: $_hook"
            };
        done;
        unset _hook
    };
    function main () 
    { 
        curl --proto '=https' --tlsv1.2 -sSfL "https://git.io/Jc9bH" | bash -s selfinstall;
        source ~/.bashbox/env;
        bashbox install --force bigdroid;
        bigdroid build --release;
        local _head_tag;
        _head_tag="$(git -C "." name-rev --tags --name-only HEAD)";
        source Bigdroid.meta;
        gh auth login --with-token <<< "$API_GITHUB_TOKEN";
        gh release create --draft "$_head_tag" "target/release/${CODENAME}-${VERSION}.iso#${NAME} $_head_tag"
    };
    main "$@";
    exit
}
main@bashbox%5970 "$@";
